# USAGE: "abaqus cae noGui=build.py -- defaults_path model_path json_path"

from __future__ import division  # "Fix" integer division so that 1/3 != 0

import json
import os
import sys
import re
import ConfigParser

import numpy as np

# Imports from Abaqus
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *


def str_to_bool(value):
    return value in {1, "1", "True", "true", "yes", "Yes", True}



# Parse arguments
defaults_path = sys.argv[-3]
model_path = sys.argv[-2]
json_path = sys.argv[-1]

# Check for validity
if not defaults_path.endswith(".cfg"):
    raise ValueError("Unrecognised defaults configuration: %s"%(defaults_path))

if not model_path.endswith(".cfg"):
    raise ValueError("Unrecognised model configuration: %s"%(model_path))

if not json_path.endswith(".json"):
    raise ValueError("Unrecognised JSON configuration: %s"%(json_path))



#######################################
## Load geometry generated by Matlab ##
#######################################

# Load the Matlab data from json
json_filepath = json_path
#json_filepath = "APs_sameSize_N30_R1.json"
try:
    realisation = re.search(".*_R(?P<R>[0-9]+)\.json", json_filepath).group("R")
except AttributeError:
    raise ValueError("Unable to extract realisation number from %s"%(json_path))

with open(json_filepath, "r") as f:
    json_data = json.load(f)


# Extract values
VF = json_data["VF"]
delmin_APs = json_data["delmin_APs"]
APs_data = np.array(json_data["APs_data"])
Cathode_size = json_data["Cathode_data"]
Same_size = json_data["Same_size"]

N = len(APs_data)
#AP_dia = a = APs_data(:,1)
#AP_centre = O = APs_data(:,2:4)
#AP_point = P_AP = APs_data(:,5:7)

RVElenX = Cathode_size[0]
CATHlenY = Cathode_size[1]
RVElenZ = Cathode_size[2]


####################################
## Load local model configuration ##
####################################

# Load the defaults first so that they get overwritten
cfg = ConfigParser.ConfigParser()
cfg.read([
    os.path.expanduser(defaults_path),
    os.path.expanduser(model_path),
])

# APs material parameters
D_AP = cfg.getfloat("AP", "D_AP")
E_AP = cfg.getfloat("AP", "E_AP")
nu_AP = cfg.getfloat("AP", "nu_AP")
exp_AP = cfg.getfloat("AP", "exp_AP")
c0_AP = cfg.getfloat("AP", "c0_AP")

# SE Layer thickness
thSE = cfg.getfloat("SE", "thSE")

# LE model for SE? - False => EVP)
LE = cfg.getboolean("SE", "LE")

# SE material parameters
D_SE = cfg.getfloat("SE", "D_SE")       # Li diffusion coefficient (conductivity)
E_SE = cfg.getfloat("SE", "E_SE")     # Young's modulus
nu_SE = cfg.getfloat("SE", "nu_SE")    # Poisson's ratio
q = cfg.getfloat("SE", "q")          # Power law parameter
tau0 = cfg.getfloat("SE", "tau0")     # Relaxation time
sig0 = cfg.getfloat("SE", "sig0")       # Coefficient
Gratio = cfg.getfloat("SE", "Gratio")     # Shear moduli ratio
c0_SE = cfg.getfloat("SE", "c0_SE")     # Residual Li concentration - was set to 43. or 1.



## SE parameters for separate instances
separate_SE = cfg.getboolean("Separate", "separate_SE")
separate_CC = cfg.getboolean("Separate", "separate_CC")

# Use materials from "separate" (without multiple instances)
separate_material = cfg.getboolean("Separate", "separate_material")

# Material parameters for the SE Layer (SE-Layer)
D_SELayer = eval(cfg.get("Separate", "D_SElayer"))
E_SELayer = eval(cfg.get("Separate", "E_SElayer"))
nu_SELayer = eval(cfg.get("Separate", "nu_SElayer"))
c0_SELayer = eval(cfg.get("Separate", "c0_SElayer"))

# LE model for SE within the Cathode (SE-Cathode)?
# 1/true - yes, 0/false - no (EVP)
LE_SECathode = str_to_bool(eval(cfg.get("Separate", "LE_SECathode")))

# Material parameters for the SE within the Cathode (SE-Cathode)
D_SECathode  = eval(cfg.get("Separate", "D_SECathode"))
E_SECathode  = eval(cfg.get("Separate", "E_SECathode"))
nu_SECathode  = eval(cfg.get("Separate", "nu_SECathode"))
q_SECathode = eval(cfg.get("Separate", "q_SECathode"))          # Power law parameter
tau0_SECathode = eval(cfg.get("Separate", "tau0_SECathode"))     # Relaxation time
sig0_SECathode = eval(cfg.get("Separate", "sig0_SECathode"))       # Coefficient
Gratio_SECathode = eval(cfg.get("Separate", "Gratio_SECathode"))     # Shear moduli ratio
c0_SECathode  = eval(cfg.get("Separate", "c0_SECathode"))


## CC parameters

# Do you want to add CC to the system? 1 - yes, 0 - no
CC = cfg.getboolean("CC", "CC")

# If yes, privede the CC thickness
thCC = cfg.getfloat("CC", "thCC")

# CC material parameters
E_CC = cfg.getfloat("CC", "E_CC")
nu_CC = cfg.getfloat("CC", "nu_CC")


# Other parameters

# Is pressure applied at the bottom surface (CC side)?
# 1 - yes, 0 - no (bottom surface is fully fixed)
pr = cfg.getboolean("Pressure", "pr")
# If yes, provide the value for the pressure
pr_value = cfg.getfloat("Pressure", "pr_value")  # MPa
pre_pr_value = cfg.getfloat("Pressure", "pre_pr_value")

# Pressure step time
InInc_pr = cfg.getfloat("Pressure", "InInc_pr")
MaxInc_pr = cfg.getfloat("Pressure", "MaxInc_pr")
Time_pr = cfg.getfloat("Pressure", "Time_pr")


## Boundary
# Li diffusion coefficient (conductivity) for the top surface
D_b = cfg.getfloat("Boundary", "D_b")

# Mechanical boundary conditions
mechanical_BCs = cfg.get("Boundary", "mechanical").lower()

# Ensure validity
if mechanical_BCs not in {"fixed", "fixed-top", "planar", "planar-partial", "periodic"}:
    raise ValueError("Mechanical BC not recognised: " + mechanical_BCs)

if mechanical_BCs == "fixed" and pr:
    raise ValueError("Pressure cannot be applied to fully fixed boundary conditions")


## Mesh sizes
spSizeAPs = cfg.getfloat("Mesh", "spSizeAPs")    # Part mesh (for the APs)
spSizeSE = cfg.getfloat("Mesh", "spSizeSE")   # Part mesh (for the SE or SE+CC)
seSizeSE = cfg.getfloat("Mesh", "seSizeSE")     # Top edges mesh (for the SE Layer's biased mesh)


## Time parameters
InInc = cfg.getfloat("Time", "InInc")
MaxInc = cfg.getfloat("Time", "MaxInc")
Time = cfg.getfloat("Time", "Time")

Cycles = cfg.getint("Time", "Cycles")

RestartFreq = cfg.getint("Time", "RestartFreq")


# Calculated values
SElenY = CATHlenY + thSE


#####################################
## Build the geometry of the model ##
#####################################

# Get/create model
model = mdb.models["Model-1"]

parts = {}
instances = {}

# Create the APs
ap_parts = []
ap_instances = []
for i, ap in enumerate(APs_data):
    radius = ap[0]
    coords = ap[1:4]

    # Sketch the AP
    ap_sketch = model.ConstrainedSketch(name='sketch-ap-%i'%(i+1), sheetSize=200)
    ap_sketch.ConstructionLine(point1=(0, -100), point2=(0, 100))
    ellipse = ap_sketch.EllipseByCenterPerimeter(axisPoint1=(0, radius), axisPoint2=(radius, 0), center=(0, 0))
    ap_sketch.Line(point1=(0, radius), point2=(0, -radius))
    ap_sketch.autoTrimCurve(curve1=ellipse, point1=(-radius, 0))

    part_name = "Part-AP%i"%(i+1)

    # Create the part
    ap_part = model.Part(name=part_name, dimensionality=THREE_D, type=DEFORMABLE_BODY)
    ap_part.BaseSolidRevolve(angle=360.0, sketch=ap_sketch)

    # Create the AP instance and move it to position
    ap_instance = model.rootAssembly.Instance(name=part_name, part=ap_part, dependent=OFF)
    ap_instance.translate(vector=coords)

    # Store the part/instance references for later use
    ap_parts.append(ap_part)
    ap_instances.append(ap_instance)

# Merge the AP instances and delete individual ones
instances["APs"] = model.rootAssembly.InstanceFromBooleanMerge(
    name="Inst-APs",
    instances=ap_instances,
    originalInstances=DELETE,
)

# Store a reference to the part created by the instances
parts["APs"] = model.parts["Inst-APs"]


# Create the cathode
cath_sketch = model.ConstrainedSketch(name='sketch-cathode', sheetSize=200)
cath_sketch.rectangle(point1=(0, 0), point2=(RVElenX, CATHlenY))

cath_part = model.Part(name="Part-Cathode", dimensionality=THREE_D, type=DEFORMABLE_BODY)
cath_part.BaseSolidExtrude(depth=RVElenZ, sketch=cath_sketch)

cath_inst_block = model.rootAssembly.Instance(name="Inst-Cathode-Block", part=cath_part, dependent=OFF)
instances["Cathode"] = model.rootAssembly.InstanceFromBooleanCut(
    name="Inst-Cathode",
    instanceToBeCut=cath_inst_block,
    cuttingInstances=(instances["APs"], ),
    originalInstances=SUPPRESS,
)

parts["Cathode"] = model.parts["Inst-Cathode"]

# Resume/unsuppress the APs feature
model.rootAssembly.resumeFeatures((instances["APs"].name, ))

# Delete the (already suppressed) uncut Cathode instance
model.rootAssembly.deleteFeatures((cath_inst_block.name, ))


# Create the SE layer
se_sketch = model.ConstrainedSketch(name='sketch-se', sheetSize=200)
se_sketch.rectangle(point1=(0, 0), point2=(RVElenX, thSE))

se_part = model.Part(dimensionality=THREE_D, name="Part-SE-Layer", type=DEFORMABLE_BODY)
se_part.BaseSolidExtrude(depth=RVElenZ, sketch=se_sketch)

instances["SE"] = model.rootAssembly.Instance(
    name="Inst-SE-Layer",
    part=se_part,
    dependent=ON
)
instances["SE"].translate(vector=(0, CATHlenY, 0))

# Merge the SE
if not separate_SE:
    instances["Cathode-SE"] = model.rootAssembly.InstanceFromBooleanMerge(
        name="Inst-Cath-SE",
        instances=(instances["Cathode"], instances["SE"]),
        originalInstances=DELETE,
        keepIntersections=ON,
    )

    # Remove stale references
    del instances["Cathode"]
    del instances["SE"]

    parts["Cathode"] = model.parts["Inst-Cath-SE"]
    parts["SE"] = model.parts["Inst-Cath-SE"]
else:
    parts["SE"] = se_part

# Create current collector (if requested)
if CC:
    cc_sketch = model.ConstrainedSketch(name='sketch-CC', sheetSize=200)
    cc_sketch.rectangle(point1=(0, 0), point2=(RVElenX, thCC))

    cc_part = model.Part(dimensionality=THREE_D, name="Part-CC", type=DEFORMABLE_BODY)
    cc_part.BaseSolidExtrude(depth=RVElenZ, sketch=cc_sketch)

    instances["CC"] = model.rootAssembly.Instance(name="Inst-CC", part=cc_part, dependent=ON)
    instances["CC"].translate(vector=(0, -thCC, 0))

    # Merge instances if necessary
    if not separate_CC:
        if not separate_SE:
            # SE has already been merged with Cathode
            instances["Cathode-SE-CC"] = model.rootAssembly.InstanceFromBooleanMerge(
                name="Inst-Cath-SE-CC",
                instances=(instances["Cathode-SE"], instances["CC"]),
                originalInstances=DELETE,
                keepIntersections=ON,
            )

            # Remove stale references
            del instances["Cathode-SE"]
            del instances["CC"]

            # Update the part references
            parts["Cathode"] = model.parts["Inst-Cath-SE-CC"]
            parts["SE"] = parts["Cathode"]
            parts["CC"] = parts["Cathode"]
        else:
            # SE is separate, so just merge with the cathode
            instances["Cathode-CC"] = model.rootAssembly.InstanceFromBooleanMerge(
                name="Inst-Cath-CC",
                instances=(instances["Cathode"], instances["CC"]),
                originalInstances=DELETE,
                keepIntersections=ON,
            )

            # Remove stale references
            del instance["Cathode"]
            del instances["CC"]

            # Update the part references
            parts["Cathode"] = model.parts["Inst-Cath-CC"]
            parts["CC"] = parts["Cathode"]
    else:
        # Store CC part reference
        parts["CC"] = cc_part


######################
## Create materials ##
######################

# LE material for the APs
material_AP = model.Material(name="Material-APs-LE")
material_AP.Elastic(table=((E_AP, nu_AP), ))
material_AP.Density(table=((1, ), ))
material_AP.Expansion(table=((exp_AP, ), ))
material_AP.Conductivity(table=((D_AP, ), ))
material_AP.SpecificHeat(table=((1, ), ))


# LE material for the SE
material_SE_LE = model.Material(name="Material-SE-LE")
material_SE_LE.Elastic(table=((E_SE, nu_SE), ))
material_SE_LE.Density(table=((1, ), ))
material_SE_LE.Conductivity(table=((D_SE, ), ))
material_SE_LE.SpecificHeat(table=((1, ), ))

# EVP material for the SE
material_SE_EVP = model.Material(name="Material-SE-EVP")
material_SE_EVP.Density(table=((1, ), ))
material_SE_EVP.Conductivity(table=((D_SE, ), ))
material_SE_EVP.SpecificHeat(table=((1, ), ))
material_SE_EVP.Depvar(n=18)
material_SE_EVP.UserMaterial(mechanicalConstants=(E_SE, nu_SE, q, tau0, sig0, Gratio))


## Separate materials:
# LE material for the SE
material_SElayer_LE = model.Material(name="Material-SElayer-LE")
material_SElayer_LE.Elastic(table=((E_SELayer, nu_SELayer), ))
material_SElayer_LE.Density(table=((1, ), ))
material_SElayer_LE.Conductivity(table=((D_SELayer, ), ))
material_SElayer_LE.SpecificHeat(table=((1, ), ))

# LE material for the SE
material_SEcathode_LE = model.Material(name="Material-SEcathode-LE")
material_SEcathode_LE.Elastic(table=((E_SECathode, nu_SECathode), ))
material_SEcathode_LE.Density(table=((1, ), ))
material_SEcathode_LE.Conductivity(table=((D_SECathode, ), ))
material_SEcathode_LE.SpecificHeat(table=((1, ), ))

# EVP material for the SE
material_SEcathode_EVP = model.Material(name="Material-SEcathode-EVP")
material_SEcathode_EVP.Density(table=((1, ), ))
material_SEcathode_EVP.Conductivity(table=((D_SECathode, ), ))
material_SEcathode_EVP.SpecificHeat(table=((1, ), ))
material_SEcathode_EVP.Depvar(n=18)
material_SEcathode_EVP.UserMaterial(mechanicalConstants=(
    E_SECathode, nu_SECathode, q_SECathode, tau0_SECathode, sig0_SECathode, Gratio_SECathode
))


# LE material for the CC
material_CC = model.Material(name="Material-CC-LE")
material_CC.Elastic(table=((E_AP, nu_AP), ))
material_CC.Density(table=((1, ), ))
material_CC.SpecificHeat(table=((1, ), ))


# Create sections with assigned materials
sections = {}
sections["APs"] = model.HomogeneousSolidSection(
    material="Material-APs-LE",
    name="Section-APs",
    thickness=None,
)

if separate_material or separate_SE:
    se_layer_material = "Material-SElayer-LE"
    se_cathode_material = "Material-SEcathode-LE" if LE_SECathode else "Material-SEcathode-EVP"
else:
    se_layer_material = "Material-SE-LE"
    se_cathode_material = "Material-SE-LE" if LE else "Material-SE-EVP"

sections["SE-layer"] = model.HomogeneousSolidSection(
    material=se_layer_material,
    name="Section-SE-layer",
    thickness=None,
)
sections["SE-cathode"] = model.HomogeneousSolidSection(
    material=se_cathode_material,
    name="Section-SE-cathode",
    thickness=None,
)

sections["CC"] = model.HomogeneousSolidSection(
    material="Material-CC-LE",
    name="Section-CC",
    thickness=None,
)


BOUNDS = {
    "APs": (0, 0, 0, RVElenX, CATHlenY, RVElenZ),
    "Cathode": (-0.0001, -0.0001, -0.0001, RVElenX+0.0001, CATHlenY+0.0001, RVElenZ+0.0001),
    "SE": (-0.0001, CATHlenY-0.0001, -0.0001, RVElenX+0.0001, SElenY+0.0001, RVElenZ+0.0001),
    "CC": (-0.0001, -0.0001-thCC, -0.0001, RVElenX+0.0001, 0.0001, RVElenZ+0.0001),
}
sets = {}

# Create sets for each section of the model
cells_APs = parts["APs"].cells.getByBoundingBox(*BOUNDS["APs"])
sets["APs"] = parts["APs"].Set(
    name="Set-APs",
    cells=cells_APs,
)

cells_Cathode = parts["Cathode"].cells.getByBoundingBox(*BOUNDS["Cathode"])
sets["Cathode"] = parts["Cathode"].Set(
    name="Set-Cathode",
    cells=cells_Cathode,
)

# Account for different positions in raw parts and merged instances
if separate_SE:
    bounds = (-0.0001, -0.0001, -0.0001, RVElenX+0.0001, thSE+0.0001, RVElenZ+0.0001)
else:
    bounds = BOUNDS["SE"]

cells_SE = parts["SE"].cells.getByBoundingBox(*bounds)
sets["SE"] = parts["SE"].Set(
    name="Set-SE",
    cells=cells_SE,
)

if "CC" in parts:
    # Account for different positions in raw parts and merged instances
    if separate_CC:
        bounds = (-0.0001, -0.0001, -0.0001, RVElenX+0.0001, thCC+0.0001, RVElenZ+0.0001)
    else:
        bounds = BOUNDS["CC"]

    cells_CC = parts["CC"].cells.getByBoundingBox(*bounds)
    sets["CC"] = parts["CC"].Set(
        name="Set-CC",
        cells=cells_CC,
    )

# Assign sections (and therefore materials)
parts["APs"].SectionAssignment(
    region=sets["APs"],
    sectionName="Section-APs",
)
parts["SE"].SectionAssignment(
    region=sets["SE"],
    sectionName="Section-SE-layer",
)
parts["Cathode"].SectionAssignment(
    region=sets["Cathode"],
    sectionName="Section-SE-cathode",
)

if "CC" in sets:
    parts["CC"].SectionAssignment(
        region=sets["CC"],
        sectionName="Section-CC",
    )
    
cae_path = json_filepath[:-5] + ".cae"
mdb.saveAs(pathName=cae_path)



